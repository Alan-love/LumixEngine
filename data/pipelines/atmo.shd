include "pipelines/common.glsl"

vertex_shader [[
	
	layout (location = 0) out vec2 v_uv;
	
	void main()
	{
		gl_Position = fullscreenQuad(gl_VertexID, v_uv);
	}
]]


fragment_shader [[
	layout (location = 0) in vec2 v_uv;
	layout (location = 0) out vec4 o_color;
	layout (binding=0) uniform sampler2D u_depth_buffer;
	layout (binding=1) uniform sampler2D u_inscatter;
	layout (binding=2) uniform sampler2D u_optical_depth;
	layout(std140, binding = 4) uniform Data {
		float u_bot;
		float u_top;
		float u_distribution_rayleigh;
		float u_distribution_mie;
		vec4 u_scatter_rayleigh;
		vec4 u_scatter_mie;
		vec4 u_absorb_mie;
		vec4 u_sunlight;
	};

	vec2 ray_sphere_intersect(vec3 r0, vec3 rd, vec3 s0, float sr) {
		vec3 s0_r0 = s0 - r0;
		float tc = dot(s0_r0, rd);
		float d2 = dot(s0_r0, s0_r0) - tc * tc;
		float sr2 = sr * sr;
		if (d2 > sr2) return vec2(-1);
		float td2 = sr2 - d2;
		float td = sqrt(td2);
		return vec2(tc - td, tc + td);
	}

	vec3 getTopAtmoLightDir(vec3 p) {
		vec2 t = ray_sphere_intersect(p, u_light_direction.xyz, vec3(0), u_top);
		return p + t.y * u_light_direction.xyz;
	}

	vec3 transmittance(vec3 extinction, float len) {
		return exp(-len * extinction);
	}

	float computeDensity(vec3 a, vec3 b, float distribution) {
		float l = length(a - b);
		int step_count = int(clamp(l / 1000, 1.0, 7.0));
		float dens = 0;
		vec3 step = (b - a) / step_count;
		float step_len = l / step_count;
		vec3 p = a;
		for (int i = 0; i < step_count; ++i) {
			float h = length(p);
			float tmp = exp(min(0, (u_bot - h) / distribution));
			dens += step_len * tmp;
			p += step;
		}
		return dens;
	}
	
	
	vec3 getWorldNormal(vec2 frag_coord)
	{
		float z = 1;
		#ifdef _ORIGIN_BOTTOM_LEFT
			vec4 posProj = vec4(frag_coord * 2 - 1, z, 1.0);
		#else
			vec4 posProj = vec4(vec2(frag_coord.x, 1-frag_coord.y) * 2 - 1, z, 1.0);
		#endif
		vec4 wpos = u_camera_inv_view_projection * posProj;
		wpos /= wpos.w;
		vec3 view = (u_camera_inv_view * vec4(0.0, 0.0, 0.0, 1.0)).xyz - wpos.xyz;

		return -normalize(view);
	}
	
	// mie - Schlick appoximation phase function of Henyey-Greenstein
	float miePhase(float g, float cos_theta)
	{
		float k = 1.55*g - 0.55*g*g*g; 
		float tmp = 1 + k * cos_theta;
		return (1 - k * k) / (4 * M_PI * tmp * tmp);
	}

	float rayleighPhase(float cos_theta)
	{
		return 3 / (16.0 * M_PI) * (1 + cos_theta * cos_theta);
	}

	float phase(float alpha, float g)
	{
		float a = 3.0*(1.0-g*g);
		float b = 2.0*(2.0+g*g);
		float c = 1.0+alpha*alpha;
		float d = pow(1.0+g*g-2.0*g*alpha, 1.5);
		return (a/b)*(c/d);
	}

	void main()
	{
		vec3 sunlight = u_sunlight.rgb * u_sunlight.a;
		float ndc_depth = texture(u_depth_buffer, v_uv).r;
		vec3 eyedir = getWorldNormal(v_uv);
		const float cos_theta = dot(eyedir, u_light_direction.xyz);

		if (ndc_depth > 0) {
			float linear_depth = toLinearDepth(u_camera_inv_projection, ndc_depth);
			vec2 v = vec2(
				saturate(linear_depth / 50e3),
				max(0, eyedir.y)
			);
			vec4 insc = textureLod(u_inscatter, v, 0);
			o_color.rgb = 
				vec3(insc.a) * miePhase(0.75, -cos_theta) * sunlight * u_scatter_mie.rgb
				+  insc.rgb * rayleighPhase(-cos_theta) * sunlight * u_scatter_rayleigh.rgb
				;
		}
		else {
			float spot = smoothstep(0.0, 1000.0, phase(cos_theta, 0.9995)) * 200;

			vec2 v = vec2(1);
			v.y = max(0, eyedir.y);
		
			const vec3 extinction_rayleigh = u_scatter_rayleigh.rgb;
			const vec3 extinction_mie = u_scatter_mie.rgb + u_absorb_mie.rgb;
		
			const vec3 cam_origin = vec3(0, u_bot, 0);
			vec3 p = cam_origin + u_camera_world_pos.xyz;
			vec4 insc = textureLod(u_inscatter, v, 0);
			vec3 top_atmo_light_dir = getTopAtmoLightDir(p);
			float p_height = saturate((length(p) - u_bot) / (u_top - u_bot));
			vec2 opt_depth = textureLod(u_optical_depth, vec2(abs(eyedir.y), p_height), 0).xy;
			o_color.rgb = 
				vec3(insc.a) * miePhase(0.75, -cos_theta) * sunlight * u_scatter_mie.rgb
				+  insc.rgb * rayleighPhase(-cos_theta) * sunlight * u_scatter_rayleigh.rgb
				+ spot * exp(-opt_depth.x * extinction_rayleigh - opt_depth.y * extinction_mie) 
				;
		}

		o_color.a = 1;
	}
]]