include "pipelines/common.glsl"

common [[
	layout(std140, binding = 4) uniform Drawcall {
		float u_filter_roughness;
		int u_face;
		int u_mip;
	};
]]

vertex_shader [[
	layout (location = 0) out vec2 v_uv;
	void main() {
		vec4 pos = fullscreenQuad(gl_VertexID, v_uv);
		pos.xy = pos.xy;
		pos.y = -pos.y;
		gl_Position = pos;
	}
]]


fragment_shader [[
	layout (binding=0) uniform samplerCube u_texture;
	layout (location = 0) in vec2 v_uv;
	layout (location = 0) out vec4 o_color;

	// https://github.com/JoeyDeVries/LearnOpenGL/blob/master/src/6.pbr/2.2.1.ibl_specular/2.2.1.prefilter.fs
	float RadicalInverse_VdC(uint bits) 
	{
		bits = (bits << 16u) | (bits >> 16u);
		bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
		bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
		bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
		bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
		return float(bits) * 2.3283064365386963e-10; // / 0x100000000
	}
	
	vec2 Hammersley(uint i, uint N)
	{
		return vec2(float(i)/float(N), RadicalInverse_VdC(i));
	}

	vec3 ImportanceSampleGGX(vec2 Xi, vec3 N, float roughness)
	{
		float a = roughness*roughness;
	
		float phi = 2.0 * M_PI * Xi.x;
		float cosTheta = sqrt((1.0 - Xi.y) / (1.0 + (a*a - 1.0) * Xi.y));
		float sinTheta = sqrt(1.0 - cosTheta*cosTheta);
	
		// from spherical coordinates to cartesian coordinates
		vec3 H;
		H.x = cos(phi) * sinTheta;
		H.y = sin(phi) * sinTheta;
		H.z = cosTheta;
	
		// from tangent-space vector to world-space sample vector
		vec3 up        = abs(N.z) < 0.999 ? vec3(0.0, 0.0, 1.0) : vec3(1.0, 0.0, 0.0);
		vec3 tangent   = normalize(cross(up, N));
		vec3 bitangent = cross(N, tangent);
	
		vec3 sampleVec = tangent * H.x + bitangent * H.y + N * H.z;
		return normalize(sampleVec);
	}

	void main()
	{
		vec2 uv = v_uv * 2 - 1;
		uv.y *= -1; 
		vec3 N;

		switch(u_face) {
			case 0: N = vec3(1, -uv.y, -uv.x); break;
			case 1: N = vec3(-1, -uv.y, uv.x); break;
			case 2: N = vec3(uv.x, 1, uv.y); break;
			case 3: N = vec3(uv.x, -1, -uv.y); break;
			case 4: N = vec3(uv.x, -uv.y, 1); break;
			case 5: N = vec3(-uv.x, -uv.y, -1); break;
		}

		if (u_mip == 0) {
			o_color.rgb = texture(u_texture, N).rgb;
			o_color.a = 1;
			return;
		}

		N = normalize(N);
		vec3 R = N;
		vec3 V = R;

		const uint SAMPLE_COUNT = 1024u;
		float totalWeight = 0.0;   
		vec3 prefilteredColor = vec3(0.0);     
		for(uint i = 0u; i < SAMPLE_COUNT; ++i)
		{
			vec2 Xi = Hammersley(i, SAMPLE_COUNT);
			vec3 H  = ImportanceSampleGGX(Xi, N, u_filter_roughness);
			vec3 L  = normalize(2.0 * dot(V, H) * H - V);

			float NdotL = dot(N, L);
			if(NdotL < 0.0) {
				N = -N;
				NdotL = dot(N, L);
			}

			vec3 c = texture(u_texture, L).rgb;
			prefilteredColor += c * NdotL;
			totalWeight      += NdotL;
		}
		prefilteredColor = prefilteredColor / totalWeight;

		o_color = vec4(prefilteredColor, 1.0);
	}  
]]