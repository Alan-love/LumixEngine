texture_slot {
	name = "Albedo",
	default_texture = "textures/common/white.tga"
}

texture_slot {
	name = "Normal",
	default_texture = "textures/common/default_normal.tga"
}

texture_slot {
	name = "Roughness",
	default_texture = "textures/common/white.tga"
}

texture_slot {
	name = "Metallic",
	default_texture = "textures/common/white.tga"
}

include "pipelines/common.glsl"

define "ALPHA_CUTOUT"
define "VEGETATION"

------------------

vertex_shader [[
	layout(location = 0) in vec3 a_position;
	layout(location = 1) in vec2 a_uv;
	layout(location = 2) in vec3 a_normal;
	#ifdef _HAS_ATTR3 
		layout(location = 3) in vec3 a_tangent;
	#else 
		const vec3 a_tangent = vec3(0, 1, 0);
	#endif
	#if defined SKINNED
		layout(location = 4) in ivec4 a_indices;
		layout(location = 5) in vec4 a_weights;
		layout(std140, binding = 4) uniform Model {
			mat4 u_model;
			mat4 u_bones[256];
		};
	#elif defined INSTANCED || defined GRASS
		layout(location = 4) in vec4 i_rot_quat;
		layout(location = 5) in vec4 i_pos_scale;
	#else
		layout(std140, binding = 4) uniform Model {
			mat4 u_model;
		};
	#endif
	layout (location = 0) out vec2 v_uv;
	layout (location = 1) out vec3 v_normal;
	layout (location = 2) out vec3 v_tangent;
	layout (location = 3) out vec4 v_wpos;
	#ifdef GRASS
		layout (location = 4) out float v_darken;
	#endif
	
	void main() {
		v_uv = a_uv;
		#if defined INSTANCED || defined GRASS
			v_normal = rotateByQuat(i_rot_quat, a_normal);
			v_tangent = rotateByQuat(i_rot_quat, a_tangent);
			vec3 p = a_position * i_pos_scale.w;
			#if defined GRASS || defined VEGETATION
				p = vegetationAnim(i_pos_scale.xyz, p);
			#endif
			v_wpos = vec4(i_pos_scale.xyz + rotateByQuat(i_rot_quat, p), 1);
			#ifdef GRASS
				v_darken = a_position.y > 0.1 ? 1 : 0.0;
				v_normal = rotateByQuat(i_rot_quat, normalize(a_position));
			#endif
		#elif defined SKINNED
			mat4 model_mtx = u_model * (a_weights.x * u_bones[a_indices.x] + 
			a_weights.y * u_bones[a_indices.y] +
			a_weights.z * u_bones[a_indices.z] +
			a_weights.w * u_bones[a_indices.w]);
			v_normal = mat3(model_mtx) * a_normal;
			v_tangent = mat3(model_mtx) * a_tangent;
			v_wpos = model_mtx * vec4(a_position,  1);
		#else 
			mat4 model_mtx = u_model;
			v_normal = mat3(model_mtx) * a_normal;
			v_tangent = mat3(model_mtx) * a_tangent;

			vec3 p = a_position;
			#ifdef VEGETATION
				p = vegetationAnim(u_model[3].xyz, p);
			#endif

			v_wpos = model_mtx * vec4(p,  1);
		#endif
		
		gl_Position = u_pass_view_projection * v_wpos;		
	}
]]

---------------------

fragment_shader [[
	layout (binding=0) uniform sampler2D u_albedomap;
	layout (binding=1) uniform sampler2D u_normalmap;
	layout (binding=2) uniform sampler2D u_roughnessmap;
	layout (binding=3) uniform sampler2D u_metallicmap;
	layout (binding=4) uniform sampler2D u_shadowmap;
	layout (binding=5) uniform sampler2D u_shadow_atlas;
	layout (location = 0) in vec2 v_uv;
	layout (location = 1) in vec3 v_normal;
	layout (location = 2) in vec3 v_tangent;
	layout (location = 3) in vec4 v_wpos;
	#ifdef GRASS
		layout (location = 4) in float v_darken;
	#endif

	#if defined DEFERRED || defined GRASS
		layout(location = 0) out vec4 o_gbuffer0;
		layout(location = 1) out vec4 o_gbuffer1;
		layout(location = 2) out vec4 o_gbuffer2;
	#elif !defined DEPTH
		layout(location = 0) out vec4 o_color;
	#endif

	Surface getSurface()
	{
		Surface data;
		#ifdef GRASS
			vec4 c = texture(u_albedomap, v_uv, -2) * u_material_color;
			//data.albedo *= v_darken;
		#else
			vec4 c = texture(u_albedomap, v_uv) * u_material_color;
		#endif
		data.albedo = c.rgb;
		data.alpha = c.a;
		#ifdef ALPHA_CUTOUT
			if(data.alpha < 0.1) discard;
		#endif

		vec3 N = v_normal;
		vec3 tangent = v_tangent;
		#ifdef VEGETATION
			if (!gl_FrontFacing) {
				//N = -N;
				//tangent = -tangent;
			}
		#endif

		mat3 tbn = mat3(
			normalize(tangent),
			normalize(N),
			normalize(cross(N, tangent))
			);
		
		data.wpos = v_wpos.xyz;
		data.V = normalize(-data.wpos);
		data.roughness = texture(u_roughnessmap, v_uv).g * u_roughness;
		data.metallic  = texture(u_metallicmap, v_uv).b * u_metallic;
		data.N.xz = texture(u_normalmap, v_uv).wy * 2 - 1;
		data.N.y = sqrt(saturate(1 - dot(data.N.xz, data.N.xz))); 
		data.N = tbn * data.N;
		data.emission = u_emission;
		#ifdef GRASS 
			data.N = normalize(v_normal);
			data.N = normalize(mix(data.N, u_light_direction.xyz, 0.2));
		#endif
		return data;
	}
	
	#ifdef DEPTH
		void main()
		{
			#ifdef ALPHA_CUTOUT
				vec4 c = texture(u_albedomap, v_uv);
				if(c.a < 0.5) discard;
			#endif
		}
	#elif defined DEFERRED || defined GRASS
		void main()
		{
			Surface data = getSurface();
			packSurface(data, o_gbuffer0, o_gbuffer1, o_gbuffer2);
		}
	#else 
		void main()
		{
			Surface data = getSurface();
			
			float linear_depth = dot(data.wpos.xyz, u_pass_view_dir.xyz);
			Cluster cluster = getClusterLinearDepth(linear_depth);
			o_color.rgb = computeLighting(cluster, data, u_light_direction.xyz, u_light_color.rgb * u_light_intensity, u_shadowmap, u_shadow_atlas);
			o_color.a = data.alpha;
		}
	#endif
]]