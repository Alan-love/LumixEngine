include "pipelines/common.glsl"

------------------

vertex_shader [[
	layout (location = 0) out vec2 v_uv;
	void main()
	{
		gl_Position = fullscreenQuad(gl_VertexID, v_uv);
	}
]]

---------------------

fragment_shader [[
	layout (location = 0) in vec2 v_uv;
	layout (location = 0) out vec4 o_color;
	layout (binding=0) uniform sampler2D u_gbuffer0;
	layout (binding=1) uniform sampler2D u_gbuffer1;
	layout (binding=2) uniform sampler2D u_gbuffer2;
	layout (binding=3) uniform sampler2D u_gbuffer_depth;
	layout (binding=4) uniform sampler2D u_shadowmap;
	layout (binding=5) uniform sampler2D u_shadow_atlas;

	void main()
	{
		vec4 gb0 = texture(u_gbuffer0, v_uv);
		vec4 gb1 = texture(u_gbuffer1, v_uv);
		vec4 gb2 = texture(u_gbuffer2, v_uv);

		Surface surface;
		surface.albedo = gb0.rgb;
		surface.N = gb1.rgb * 2 - 1;
		surface.roughness = gb0.w;
		surface.metallic = gb1.w;
		surface.emission = unpackEmission(gb2.x);

		float ndc_depth;
		surface.wpos = getViewPosition(u_gbuffer_depth, u_camera_inv_view_projection, v_uv, ndc_depth);
		surface.V = normalize(-surface.wpos);
		vec3 L = u_light_direction.xyz;
		
		float shadow = getShadow(u_shadowmap, surface.wpos);
		vec3 direct = PBR_ComputeDirectLight(surface
			, L
			, u_light_color.rgb * u_light_intensity * shadow);
		direct += surface.emission * surface.albedo;

		float fog_factor = getFogFactor(u_camera_world_pos.y, u_camera_world_pos.y + surface.wpos.y, surface.wpos, u_fog_params.x, u_fog_params.y, u_fog_params.z);
		o_color.rgb = mix(direct, u_fog_color.rgb, fog_factor);
		
		Cluster cluster = getCluster(ndc_depth);

		o_color.rgb += pointLightsLighting(cluster, surface, u_shadow_atlas);
		o_color.rgb += envProbesLighting(cluster, surface);
		

		o_color.w = 1;
	}
]]